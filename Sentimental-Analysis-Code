{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59ac6045",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import nltk\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "import re\n",
    "from textblob import TextBlob\n",
    "\n",
    "from wordcloud import WordCloud\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import cufflinks as cf\n",
    "%matplotlib inline\n",
    "from plotly.offline import init_notebook_mode,iplot\n",
    "init_notebook_mode(connected = True)\n",
    "cf.go_offline();\n",
    "import plotly.graph_objs as go\n",
    "from plotly.subplots import make_subplots\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "warnings.warn(\"this will not show\")\n",
    "\n",
    "pd.set_option(\"display.max_columns\",None)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c85c898",
   "metadata": {},
   "outputs": [],
   "source": [
    "df =pd.read_csv(r\"C:\\Users\\Administrator\\Desktop\\amazon.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf611bd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dab3a936",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.sort_values('wilson_lower_bound',ascending = False)\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04abfb2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "def missing_values_analysis(df):\n",
    "    na_columns_ = [col for col in df.columns if df[col].isnull().sum() > 0]\n",
    "    \n",
    "    # Filter the DataFrame to include only numeric columns\n",
    "    numeric_df = df[na_columns_].select_dtypes(include=[np.number])\n",
    "    \n",
    "    # Calculate the ratio of missing values for numeric columns\n",
    "    ratio_ = (numeric_df.isnull().sum() / df.shape[0] * 100).sort_values(ascending=True)\n",
    "    \n",
    "    missing_df = pd.DataFrame({'Missing Values': numeric_df.isnull().sum(), 'Ratio': ratio_})\n",
    "    return missing_df\n",
    "\n",
    "def check_dataframe(df, head=5, tail=5):\n",
    "    print(\"SHAPE\".center(82,'~'))\n",
    "    print('Rows: {}'.format(df.shape[0]))\n",
    "    print('columns: {}'.format(df.shape[1]))\n",
    "    print(\"TYPES\".center(82,'~'))\n",
    "    print(df.dtypes)\n",
    "    print(\"\".center(82, '~'))\n",
    "    print(missing_values_analysis(df))\n",
    "    print('DUPLICATED VALUES'.center(83,'~'))\n",
    "    print(df.duplicated().sum())\n",
    "    print(\"QUANTILES\".center(82,'~'))\n",
    "    \n",
    "    # Filter the DataFrame to include only numeric columns\n",
    "    numeric_df = df.select_dtypes(include=[np.number])\n",
    "    \n",
    "    # Calculate quantiles for numeric columns\n",
    "    quantiles = numeric_df.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T\n",
    "    print(quantiles)\n",
    "\n",
    "# Rest of your code remains the same\n",
    "\n",
    "check_dataframe(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "edeb5ddf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_class(dataframe):\n",
    "    nunique_df = pd.DataFrame({'Variable': dataframe.columns,\n",
    "                               'Classes': [dataframe[i].nunique() \\\n",
    "                                            for i in dataframe.columns]})\n",
    "    nunique_df = nunique_df.sort_values('Classes', ascending = False)\n",
    "    nunique_df = nunique_df.reset_index(drop = True)\n",
    "    return nunique_df\n",
    "\n",
    "check_class(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c82f4d9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import plotly.graph_objects as go\n",
    "import plotly.express as px\n",
    "\n",
    "# Create a sample DataFrame for testing\n",
    "data = {'overall': ['Good', 'Excellent', 'Good', 'Fair', 'Excellent', 'Fair', 'Good']}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "def categorical_variable_summary(df, column_name):\n",
    "    # Create a subplot for the bar plot\n",
    "    bar_fig = px.bar(df, x=column_name, title=f'Countplot of {column_name}')\n",
    "\n",
    "    # Create a subplot for the pie chart\n",
    "    pie_fig = px.pie(df, names=column_name, title=f'Percentage of {column_name}')\n",
    "\n",
    "    # Create a figure with subplots\n",
    "    fig = go.Figure()\n",
    "\n",
    "    # Add the bar subplot\n",
    "    for data in bar_fig.data:\n",
    "        fig.add_trace(data)\n",
    "\n",
    "    # Add the pie subplot\n",
    "    for data in pie_fig.data:\n",
    "        fig.add_trace(data)\n",
    "\n",
    "    fig.update_layout(title_text=f'Distribution of {column_name}',\n",
    "                      showlegend=False)\n",
    "\n",
    "    fig.show()\n",
    "\n",
    "# Example usage:\n",
    "categorical_variable_summary(df, 'overall')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a7cb9b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load your Amazon dataset\n",
    "# Replace 'your_dataset.csv' with the actual file path\n",
    "dataset = pd.read_csv('C:\\\\Users\\\\Administrator\\\\Desktop\\\\amazon.csv', parse_dates=['reviewTime'], dayfirst=True)  # Set dayfirst=True\n",
    "\n",
    "# Set the date column as the index (if it's not already)\n",
    "# Replace 'reviewTime' with the actual date column name\n",
    "dataset.set_index('reviewTime', inplace=True)\n",
    "\n",
    "# Assuming you want to analyze the 'overall' rating column (change it accordingly)\n",
    "# Replace 'overall' with the actual column name containing the numeric data you want to analyze\n",
    "resampled_data = dataset['overall'].resample('M').mean()\n",
    "\n",
    "# Plot the time series data\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(resampled_data.index, resampled_data.values, marker='o', linestyle='-')\n",
    "plt.title('Product Lifetime')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Average Rating')\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d509af6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from wordcloud import WordCloud\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Read your dataset\n",
    "# Replace 'your_dataset.csv' with the actual path to your dataset\n",
    "df = pd.read_csv('C:\\\\Users\\\\Administrator\\\\Desktop\\\\amazon.csv')\n",
    "\n",
    "# Assuming the column name containing text data is 'text'\n",
    "text_column_name = 'reviewText'\n",
    "text_data = df[text_column_name].dropna().astype(str)\n",
    "\n",
    "# Concatenate all text data into a single string\n",
    "all_text = ' '.join(text_data)\n",
    "\n",
    "# Generate the word cloud\n",
    "wordcloud = WordCloud(width=800, height=400, random_state=21, max_font_size=110, background_color='white').generate(all_text)\n",
    "\n",
    "# Plot the WordCloud image\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.imshow(wordcloud, interpolation=\"bilinear\")\n",
    "plt.axis('off')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
